####version=RHEL8

%pre --interpreter /bin/bash --erroronfail --log=/root/ks.log

# Identify the Dell BOSS disk based on the name
DISK=$(lsblk -dpno NAME,MODEL | grep "BOSS" | awk '{print $1}')

# If Dell BOSS is not found, select the smallest available disk
if [ -z "$DISK" ]; then
  echo "Dell BOSS disk not found. Selecting the smallest available disk."
  DISK=$(lsblk -dpno NAME,SIZE,TYPE | grep -w 'disk' | grep -v zram| sort -k2 -h | head -n 1 | awk '{print $1}')
fi

# Check if a disk was found
if [ -z "$DISK" ]; then
  echo "Error: No disks found!" >/tmp/disk.log
  exit 1
fi

echo "Using disk: $DISK" > /tmp/disk.log

# Export the detected disk name to be used in the Kickstart configuration
echo "ignoredisk --only-use=$DISK" >> /tmp/pre-ks.cfg
echo "bootloader --append=\" crashkernel=auto\" --location=mbr --boot-drive=$DISK" >> /tmp/pre-ks.cfg
echo "clearpart --all --initlabel --drives=$DISK" >> /tmp/pre-ks.cfg
%end

%include /tmp/pre-ks.cfg

# Automatic partitioning
autopart --type=lvm

# use %pre-install for scripts after disk and network are configured, but before other stuff.

# Use text mode install
text
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information.  Note IPV6 assignments aren't supported currently.
# Note Multiple ip addresses can not be assigned to a single device using the network command. secondary ips need to be added in %post
# If two network lines use the same device, the second network will overwrite the first.

{%- set interface_physical = [] %}
{%- set interface_bond = [] %}
{%- set interface_vlan = [] %}

{%- for interface in network.interfaces %}
  {%- if interface.interfaceType == 'physical' %}
    {%- set interface_physical = (interface_physical.push(interface), interface_physical) %}
  {%- elif interface.interfaceType == 'bond' %}
    {%- set interface_bond = (interface_bond.push(interface), interface_bond) %}
  {%- elif interface.interfaceType == 'vlan' %}
    {%- set interface_vlan = (interface_vlan.push(interface), interface_vlan) %}
  {%- endif %}
{%- endfor %}

{# Find the first interface with DNS nameservers #}
{%- set dns_servers = [] %}
{%- set dns_found = False %}

{# Check physical interfaces #}
{%- for interface in interface_physical %}
  {%- if not dns_found and interface.dns_nameservers and interface.dns_nameservers.addresses %}
    {%- set dns_servers = interface.dns_nameservers.addresses %}
    {%- set dns_found = True %}
  {%- endif %}
{%- endfor %}

{# If not found, check bond interfaces #}
{%- if not dns_found %}
  {%- for interface in interface_bond %}
    {%- if not dns_found and interface.dns_nameservers and interface.dns_nameservers.addresses %}
      {%- set dns_servers = interface.dns_nameservers.addresses %}
      {%- set dns_found = True %}
    {%- endif %}
  {%- endfor %}
{%- endif %}

{# If still not found, check VLAN interfaces #}
{%- if not dns_found %}
  {%- for interface in interface_vlan %}
    {%- if not dns_found and interface.dns_nameservers and interface.dns_nameservers.addresses %}
      {%- set dns_servers = interface.dns_nameservers.addresses %}
      {%- set dns_found = True %}
    {%- endif %}
  {%- endfor %}
{%- endif %}

{%- set dns_servers_str = dns_servers | join(',') %}

{# Set the hostname on a separate network command line #}
network --hostname={{ serverInstance.label}}

{# Macro to construct interface names #}    
{%- macro construct_interface_name(interface) -%}
  {%- if interface.interfaceType == 'physical' -%}
    phy{{ interface.typeInterfaceId }}
  {%- elif interface.interfaceType == 'bond' -%}
    bond{{ interface.typeInterfaceId }}
  {%- elif interface.interfaceType == 'vlan' -%}
    vlan{{ interface.vlanId }}
  {%- else -%}
    {{ interface.typeInterfaceId }}
  {%- endif %}
{%- endmacro -%}

{# Configure physical interfaces #}
{%- if interface_physical | length %}
  {%- for interface in interface_physical %}
    {%- if interface.ipv4Addresses | length and (interface_vlan | length == 0) %}
      {%- set ipv4_address = interface.ipv4Addresses[0] %}
      network --bootproto=static --onboot=yes --device={{ interface.macAddress | lower }}{% if ipv4_address.ip %} --ip={{ ipv4_address.ip }}{% endif %}{% if ipv4_address.netmask %} --netmask={{ ipv4_address.netmask }}{% endif %}{% if interface.routes and interface.routes[0].via %} --gateway={{ interface.routes[0].via }}{% endif %}{% if interface.mtu %} --mtu={{ interface.mtu }}{% endif %}{% if dns_servers_str %} --nameserver={{ dns_servers_str }}{% endif %} --ipv6=auto --activate 
    {%- else %}
      network --device={{ interface.macAddress | lower }} --onboot=yes{% if interface.mtu %} --mtu={{ interface.mtu }}{% endif %} --noipv4 --noipv6
    {%- endif %}  
  {%- endfor %}
{%- endif %}

{# Configure bond interfaces #}
{%- if interface_bond | length %}
  {%- for interface in interface_bond %}
    {% set bond_name = construct_interface_name(interface) %}
    {% set bond_members = [] -%}

    {%- for member in interface.members %}
      {%- set member_interface_found = False %}
      {%- for iface in interface_physical %}
        {%- if member_interface_found == False and iface.typeInterfaceId == member.id %}
          {%- set member_interface_found = True %}
          {% set member_mac = iface.macAddress | lower %}
          {% set device_name = construct_interface_name(iface) %}
         
          {%- set bond_members = (bond_members.push(device_name), bond_members) %}
        {%- endif %}
      {%- endfor %}
    {%- endfor %}

    {% set bondslaves = bond_members | join(',') %}
    {%- if interface.ipv4Addresses | length and (interface_vlan | length == 0) %}
      {%- set ipv4_address = interface.ipv4Addresses[0] %}
      {% set bond_mode = interface.parameters.mode | default('802.3ad') %}
      network --device={{ bond_name }} --onboot=yes --bootproto=static{% if ipv4_address.ip %} --ip={{ ipv4_address.ip }}{% endif %}{% if ipv4_address.netmask %} --netmask={{ ipv4_address.netmask }}{% endif %}{% if interface.routes and interface.routes[0].via %} --gateway={{ interface.routes[0].via }}{% endif %} --bondslaves={{ bondslaves }} --bondopts=mode={{ bond_mode }}{% if interface.parameters.mii_monitor_interval %},miimon={{ interface.parameters.mii_monitor_interval }}{% endif %}{% if interface.parameters.lacp_rate %},lacp_rate={{ interface.parameters.lacp_rate }}{% endif %}{% if interface.parameters.transmit_hash_policy %},xmit_hash_policy={{ interface.parameters.transmit_hash_policy }}{% endif %}{% if dns_servers_str %} --nameserver={{ dns_servers_str }}{% endif %}{% if interface.mtu %} --mtu={{ interface.mtu }}{% endif %}
    {%- else %}
      {% set bond_mode = interface.parameters.mode | default('802.3ad') %}
      network --device={{ bond_name }} --onboot=yes --bondslaves={{ bondslaves }} --noipv4 --noipv6 --bondopts=mode={{ bond_mode }}{% if interface.parameters.mii_monitor_interval %},miimon={{ interface.parameters.mii_monitor_interval }}{% endif %}{% if interface.parameters.lacp_rate %},lacp_rate={{ interface.parameters.lacp_rate }}{% endif %}{% if interface.parameters.transmit_hash_policy %},xmit_hash_policy={{ interface.parameters.transmit_hash_policy }}{% endif %}{% if interface.mtu %} --mtu={{ interface.mtu }}{% endif %}
    {%- endif %}
  {%- endfor %}
{%- endif %}


{# Configure VLAN interfaces #}
{%- if interface_vlan | length %}
  {%- for interface in interface_vlan %}
    {%- set parent_interface_found = False %}
    {%- for iface in network.interfaces %}
      {%- if parent_interface_found == False and iface.interfaceType == interface.links[0].interfaceType and iface.typeInterfaceId == interface.links[0].id %}
        {% set parent_name = construct_interface_name(iface) %}
        {%- set parent_interface_found = True %}
        {%- set parent_mtu = iface.mtu %}
        {%- set ipv4_address = interface.ipv4Addresses[0] %}
        network --bootproto=static{% if ipv4_address.ip %} --ip={{ ipv4_address.ip }}{% endif %}{% if ipv4_address.netmask %} --netmask={{ ipv4_address.netmask }}{% endif %}{% if interface.routes and interface.routes[0].via %} --gateway={{ interface.routes[0].via }}{% endif %} --vlanid={{ interface.vlanId }} --interfacename=vlan{{ interface.vlanId }} --device={{ parent_name }}{% if dns_servers_str %} --nameserver={{ dns_servers_str }}{% endif %}{% if parent_mtu %} --mtu={{ parent_mtu }}{% endif %} --onboot=yes
      {%- endif %}
    {%- endfor %}
  {%- endfor %}
{%- endif %}


%post --interpreter /bin/bash --erroronfail --log=/root/ks.log 

# Only rename interfaces if there are bonds or VLANs defined
{%- if (interface_bond | length) or (interface_vlan | length) %}
# Generate udev rules for interface renaming
cat <<EOL > /etc/udev/rules.d/70-persistent-net.rules
{%- for interface in interface_physical %}
SUBSYSTEM=="net", ACTION=="add", ATTR{address}=="{{ interface.macAddress | lower }}", NAME="{{ construct_interface_name(interface) }}"
{%- endfor %}
EOL

# Change old name to new interface name in networkmanager device names
{%- for interface in interface_physical %}
OLD_INTERFACE_NAME=$(nmcli device show | grep -B 2 -i {{ interface.macAddress }} | grep DEVICE | awk '{print $2}')
sed -i "s/$OLD_INTERFACE_NAME/{{ construct_interface_name(interface) }}/g" /etc/NetworkManager/system-connections/${OLD_INTERFACE_NAME}.nmconnection
{%- endfor %}

# Need to add this to make the network start up properly after Reboot after interface renaming
{%- for interface in interface_bond %}

# Get the bond name from the argument
BOND_NAME="{{ construct_interface_name(interface) }}"

# Directory where the NetworkManager connection files are stored
CONFIG_DIR="/etc/NetworkManager/system-connections/"

# The file to modify based on bond_name
FILE="${CONFIG_DIR}/${BOND_NAME}.nmconnection"

# Line to insert
LINE_TO_INSERT="autoconnect-slaves=1"

# Insert the line after the [connection] section
awk -v LINE="$LINE_TO_INSERT" '/\[connection\]/ { print; print LINE; next }1' "$FILE" > "${FILE}.tmp" && mv "${FILE}.tmp" "$FILE"

chmod 600 "$FILE"

{%- endfor %}
{%- endif %}

# Add ssh keys to initial user(usually root)
{% set initial_username = serverInstance.osCredentials.initialUser %}
{% if initial_username %}
  {% set homedir = "/home/" + initial_username %}
{% else %}
    {% set initial_username = "root" %}
    {% set homedir = "/root" %}
{% endif %}

# Create the .ssh directory for the user if it doesn't exist
mkdir -p {{ homedir }}/.ssh
chmod 700 {{ homedir }}/.ssh

# Add the management SSH key
echo "{{ managementSSHKey }}" >> {{ homedir }}/.ssh/authorized_keys

# Add additional user SSH keys from the array
{% for key in userSSHKeys %}
echo "{{ key }}" >> {{ homedir }}/.ssh/authorized_keys
{%- endfor %}

# Set correct permissions
chmod 600 {{ homedir }}/.ssh/authorized_keys
chown {{ initial_username }}:{{ initial_username }} {{ homedir }}/.ssh/authorized_keys

%end

# user password
{%- if initial_username and initial_username != "root" %}
  user --name={{ initial_username }} --password={{ serverInstance.osCredentials.initialPasswordEncrypted }} --plaintext
{%- endif %}

# root password
rootpw --plaintext {{serverInstance.osCredentials.initialPasswordEncrypted}}
# SELinux configuration
selinux --disabled
# Run the Setup Agent on first boot
firstboot --enable
# Do not configure the X Window System
skipx
# System services
services --enabled="chronyd"
# System timezone
timezone UTC --isUtc --ntpservers=pool.ntp.org

# Reboot the system after installation
shutdown

%packages

kexec-tools

%end

%addon com_redhat_kdump --enable --reserve-mb='auto'

%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end
