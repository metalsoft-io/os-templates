### ESXi Installation Script

## Accept the VMware End User License Agreement
vmaccepteula

# Set the root password
rootpw {{initial_password}}

# Clear paritions and install
clearpart --firstdisk --overwritevmfs
install --firstdisk --overwritevmfs

# Set the network
network --ip={{wan_interface_0_ipv4_ip_0_address}} --bootproto=static --gateway={{wan_interface_0_ipv4_ip_0_gateway}} --netmask={{wan_interface_0_ipv4_ip_0_mask}} --nameserver={{dns_server_ip_0}} --device={{wan_interface_0_mac_address}} --hostname={{instance_subdomain_permanent}}

## Reboot ESXi Host
reboot --noeject

%firstboot --interpreter=busybox

sleep 2
# enable & start SSH
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh

# enable & start ESXi Shell
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

# Suppress ESXi Shell warning
esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1

# Disable CEIP
esxcli system settings advanced set -o /UserVars/HostClientCEIPOptIn -i 2

esxcli system hostname set --fqdn {{instance_subdomain_permanent}}

getInterfaceNameFromMAC() {
    esxcli network nic list | grep -i "$1" | awk '{print $1}'
}

wan1Name="$(getInterfaceNameFromMAC "{{wan_interface_0_mac_address}}")"

# Add vmnic to standard switch
esxcli network vswitch standard uplink add --uplink-name "$wan1Name" --vswitch-name "vSwitch0"
esxcli network vswitch standard set --vswitch-name vSwitch0 --mtu 9000

# Configure IPv4 setting for a given VMkernel network interface
esxcli network ip interface ipv4 set --interface-name "vmk0" --ipv4={{wan_interface_0_ipv4_ip_0_address}} --netmask={{wan_interface_0_ipv4_ip_0_mask}} --gateway={{wan_interface_0_ipv4_ip_0_gateway}} --type=static
esxcli network ip route ipv4 add -n 0.0.0.0/0 -g {{wan_interface_0_ipv4_ip_0_gateway}}

# DNS Server
esxcli network ip dns server remove --all
# esxcli network ip dns server list
esxcli network ip dns server add --server="{{dns_server_ip_0}}"
esxcli network ip dns server add --server="{{dns_server_ip_1}}"

##########
# ntpClient

# This command opens the appropriate ports and enables the NTP daemon to talk with the external server
esxcli network firewall ruleset set -e true -r ntpClient
# List configuration for ntpClient ruleset
esxcli network firewall ruleset list -r ntpClient
# List allowed ip addresses for rulesets
esxcli network firewall ruleset allowedip list -r ntpClient

# Make a backup copy of /etc/ntp.conf
cp /etc/ntp.conf /etc/ntp.conf.bak.`date +%d%m%y`

# Configure the ESX host as an ntp client
cat>/scratch/ntp.conf<<EOF
restrict 127.0.0.1
restrict -6 ::1
restrict default kod nomodify notrap
server {{ntp_server_ip_0}}
server {{ntp_server_ip_1}}
driftfile /etc/ntp.drift
logconfig +clockstatus +peerstatus +sysstatus +syncstatus
EOF

esxcli system ntp set -f /scratch/ntp.conf
esxcli system ntp set -e 1

# restrict - The first restrict is required because ntpd needs to resolve hostname addresses via the loopback network.
# kod - Sends a KoD packet when an access violation occurs.
# nomodify - Denies ntpq and ntpdc queries that attempt to modify the run-time configuration of the server. Queries that return information are permitted.
# The driftfile line indicates the name of the file where the value for the system's clock drift (frequency error) is stored.
# For a more complete definition of driftfile, see http://www.eecis.udel.edu/~mills/ntp/html/notes.html.

# Restart the ntpd service
#/etc/init.d/ntpd restart

# To enable the NTP daemon to autostart when the server is rebooted
#chkconfig ntpd on

# Get status of the ntpd process
# The fields returned by ntpq have these meanings (https://kb.vmware.com/s/article/1005092)
#ntpq -p
##########

sleep 1
poweroff

%post --interpreter=python --ignorefailure=true
import time
stampFile = open('/finished.stamp', mode='w')
stampFile.write( time.asctime() )
