### ESXi Installation Script

## Accept the VMware End User License Agreement
vmaccepteula

# Set the root password
{% if serverInstance and serverInstance.osCredentials -%}
{%- if serverInstance.osCredentials.initialPasswordEncrypted %}
rootpw {{ serverInstance.osCredentials.initialPasswordEncrypted }}
{%- else %}
rootpw Setup00!
{%- endif %}
{%- endif %}

# Clear paritions and install
clearpart --alldrives --overwritevmfs
install --overwritevmfs --firstdisk

# Set the network
{% if network and network.interfaces and network.interfaces | length %}
{%- set interfacePhysical = [] %}
{%- set interfaceVlan = [] %}
{%- for interface in network.interfaces %}
{%- if interface.interfaceType == 'physical' %}
    {%- set interfacePhysical = (interfacePhysical.push(interface), interfacePhysical) %}
{%- elseif interface.interfaceType == 'vlan' %}
    {%- set interfaceVlan = (interfaceVlan.push(interface), interfaceVlan) %}
{%- endif %}
{%- endfor %}
{%- if interfacePhysical | length and interfaceVlan | length %}
{% if interfacePhysical[0].logicalNetworkName == 'vcf-mgmt' %}
network --bootproto=static --device={{ interfacePhysical[0].macAddress }} --ip={{ interfaceVlan[0].ipv4Addresses[0].ip }} --gateway={{ interfaceVlan[0].ipv4Addresses[0].gateway }} --netmask={{ interfaceVlan[0].ipv4Addresses[0].netmask }} --vlanid={{ interfaceVlan[0].vlanId }} --nameserver={{ siteConfig.DNSServers[0] }} --hostname={{ serverInstance.label + '.' + siteConfig.dnsZoneName }}
{%- endif %}
{%- endif %}
{%- endif %}
## Reboot ESXi Host

reboot

%firstboot --interpreter=busybox

sleep 2
# enable & start SSH
vim-cmd hostsvc/enable_ssh
vim-cmd hostsvc/start_ssh

# enable & start ESXi Shell
vim-cmd hostsvc/enable_esx_shell
vim-cmd hostsvc/start_esx_shell

# Suppress ESXi Shell warning
esxcli system settings advanced set -o /UserVars/SuppressShellWarning -i 1

# Disable CEIP
esxcli system settings advanced set -o /UserVars/HostClientCEIPOptIn -i 2

esxcli system hostname set --fqdn {{ serverInstance.label + '.' + siteConfig.dnsZoneName }}

{%- if serverInstance.customVariables | length %}
{% for key in serverInstance.customVariables -%}
{% if key == pub_ssh_key -%}
/bin/echo -e '{{ serverInstance.customVariables[key] }}' > /etc/ssh/keys-root/authorized_keys
{%- endif -%}
{% endfor -%}
{%- elif managementSSHKey %}
/bin/echo -e '{{ managementSSHKey }}' > /etc/ssh/keys-root/authorized_keys
{% endif %}

getInterfaceNameFromMAC() {
    esxcli network nic list | grep -i "$1" | awk '{print $1}'
}

{% if network and network.interfaces and network.interfaces | length %}
{%- set interfacePhysical = [] %}
{%- set interfaceVlan = [] %}
{%- for interface in network.interfaces %}
{%- if interface.interfaceType == 'physical' %}
    {%- set interfacePhysical = (interfacePhysical.push(interface), interfacePhysical) %}
{%- elseif interface.interfaceType == 'vlan' %}
    {%- set interfaceVlan = (interfaceVlan.push(interface), interfaceVlan) %}
{%- endif %}
{%- endfor %}
{%- if interfacePhysical | length and interfaceVlan | length %}
{% if interfacePhysical[0].logicalNetworkName == 'vcf-mgmt' %}
phyName="$(getInterfaceNameFromMAC "{{ interfacePhysical[0].macAddress }}")"

# Add vmnic to standard switch
esxcli network vswitch standard uplink add --uplink-name "$phyName" --vswitch-name "vSwitch0"
esxcli network vswitch standard set --vswitch-name vSwitch0 --mtu 9000

# Configure IPv4 setting for a given VMkernel network interface
esxcli network ip interface ipv4 set --interface-name "vmk0" --ipv4={{ interfaceVlan[0].ipv4Addresses[0].ip }} --netmask={{ interfaceVlan[0].ipv4Addresses[0].netmask }} --gateway={{ interfaceVlan[0].ipv4Addresses[0].gateway }} --vlanid={{ interfaceVlan[0].vlanId }} --type=static
esxcli network ip route ipv4 add -n 0.0.0.0/0 -g {{ interfaceVlan[0].ipv4Addresses[0].gateway }} -i vmk0

esxcli network vswitch standard portgroup set -p "VM Network" -v {{ interfaceVlan[0].vlanId }}
{%- endif %}
{%- endif %}
{%- endif %}

# DNS Server
esxcli network ip dns server remove --all
# esxcli network ip dns server list
{% if siteConfig.DNSServers | length -%}
{%- if siteConfig.DNSServers[0] -%}
esxcli network ip dns server add --server="{{ siteConfig.DNSServers[0] }}"
{% endif -%}
{%- if siteConfig.DNSServers[1] -%}
esxcli network ip dns server add --server="{{ siteConfig.DNSServers[1] }}"
{%- endif -%}
{%- endif %}

##########
# ntpClient
{% if siteConfig.NTPServers | length -%}
{%- if siteConfig.NTPServers[0] -%}
# This command opens the appropriate ports and enables the NTP daemon to talk with the external server
esxcli network firewall ruleset set -e true -r ntpClient
# List configuration for ntpClient ruleset
esxcli network firewall ruleset list -r ntpClient
# List allowed ip addresses for rulesets
esxcli network firewall ruleset allowedip list -r ntpClient

# Make a backup copy of /etc/ntp.conf
cp /etc/ntp.conf /etc/ntp.conf.bak.`date +%d%m%y`

# Configure the ESX host as an ntp client
cat>/scratch/ntp.conf<<EOF
restrict 127.0.0.1
restrict -6 ::1
restrict default kod nomodify notrap
server {{ siteConfig.NTPServers[0] }}
driftfile /etc/ntp.drift
logconfig +clockstatus +peerstatus +sysstatus +syncstatus
EOF

esxcli system ntp set -f /scratch/ntp.conf
esxcli system ntp set -e 1
{%- endif -%}
{%- endif %}
##########

sleep 1
poweroff

%post --interpreter=python --ignorefailure=true
import time
stampFile = open('/finished.stamp', mode='w')
stampFile.write( time.asctime() )
