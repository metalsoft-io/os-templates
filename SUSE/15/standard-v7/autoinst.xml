<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns"
         xmlns:config="http://www.suse.com/1.0/configns">

{# ============================================================================ #}
{# PARTITIONING CONFIGURATION - Customize these settings for your deployment #}
{# ============================================================================ #}

{# Disk Configuration #}
{%- set minimum_disk_size_gb = 100 %}

{# Disk Selection Options #}

{# Option 1: Target specific device path (if you know it) #}
{%- set target_disk_device = "" %}           {# e.g., "/dev/sda" - leave empty for automatic #}

{# Option 2: Skip disks by model names #}
{%- set skip_disk_models = [] %}             {# List of disk model names to skip (leave empty to disable) #}
{# Examples: #}
{# {%- set skip_disk_models = ["USB", "Virtual"] %}     # Skip USB and Virtual drives #}
{# {%- set skip_disk_models = ["SAMSUNG", "WD"] %}      # Skip Samsung and Western Digital drives #}
{# {%- set skip_disk_models = ["PERC"] %}               # Skip PERC virtual disks #}

{# Option 3: Skip disks by driver names #}
{%- set skip_disk_drivers = [] %}            {# List of disk driver names to skip (leave empty to disable) #}
{# Examples: #}
{# {%- set skip_disk_drivers = ["usb-storage"] %}       # Skip USB storage devices #}
{# {%- set skip_disk_drivers = ["sr", "cdrom"] %}       # Skip CD/DVD drives #}
{# {%- set skip_disk_drivers = ["virtio", "vmware"] %}  # Skip virtual disk drivers #}
{# {%- set skip_disk_drivers = ["megaraid_sas"] %}      # Skip megaraid based RAID controllers #}

{# Option 4: Size-based selection only #}
{# Set target_disk_device, skip_disk_models, and skip_disk_drivers to empty for size-only selection #}

{%- set use_specific_disk = (target_disk_device != "") %}
{%- set use_model_skip = (skip_disk_models | length > 0) %}
{%- set use_driver_skip = (skip_disk_drivers | length > 0) %}

{# Partitioning Configuration #}
{%- set use_custom_partitioning = false %}
{%- set use_lvm = true %}                {# Use LVM (true) or standard partitions (false) #}
{%- set default_fstype = "xfs" %}        {# Default filesystem type (xfs, ext4, btrfs) #}

{# Partition Enable/Disable Flags - Set to false to skip a partition #}
{%- set enable_boot = true %}          {# Enable /boot partition (always recommended) #}
{%- set enable_boot_efi = true %}      {# Enable /boot/efi partition (required for UEFI) #}
{%- set enable_root = true %}          {# Enable / (root) partition (required) #}
{%- set enable_var = true %}           {# Enable /var partition #}
{%- set enable_var_log = false %}      {# Enable /var/log partition #}
{%- set enable_tmp = true %}           {# Enable /tmp partition #}
{%- set enable_swap = true %}          {# Enable swap partition #}
{%- set enable_home = true %}          {# Enable /home partition #}

{# Custom Partition Sizes (in MB) - Only used when use_custom_partitioning = true #}
{%- set boot_size = 1024 %}           {# /boot partition size #}
{%- set boot_efi_size = 512 %}        {# /boot/efi partition size #}
{%- set root_size = 20480 %}          {# / (root) partition size (20GB) #}
{%- set var_size = 102400 %}          {# /var partition size (100GB) #}
{%- set var_log_size = 10240 %}       {# /var/log partition size (10GB) #}
{%- set tmp_size = 2048 %}            {# /tmp partition size (2GB) #}
{%- set swap_size = 8192 %}           {# swap partition size (8GB) #}
{%- set home_min_size = 1024 %}       {# /home minimum size (grows to fill remaining space) #}

{# Custom Additional Partitions - Define your own partitions here #}
{# Each partition is defined as: {"mount": "/path", "size": MB, "name": "lv_name", "fstype": "fs", "options": "opts", "enabled": true/false} #}
{%- set custom_partitions = [
  {"mount": "/data", "size": 51200, "name": "data", "fstype": default_fstype, "options": "", "enabled": false},
  {"mount": "/app", "size": 20480, "name": "app", "fstype": default_fstype, "options": "", "enabled": false},
  {"mount": "/backup", "size": 102400, "name": "backup", "fstype": default_fstype, "options": "", "enabled": false}
] %}

{# ============================================================================ #}
{# USER CONFIGURATION - Customize initial user settings                        #}
{# ============================================================================ #}

{# Initial User Configuration #}
{%- set initial_username = (serverInstance.osCredentials.initialUser) if (serverInstance and serverInstance.osCredentials and serverInstance.osCredentials.initialUser) else "root" %}
{%- if initial_username and initial_username != "root" %}
  {%- set homedir = "/home/" ~ initial_username %}
{%- else %}
  {%- set initial_username = "root" %}
  {%- set homedir = "/root" %}
{%- endif %}

  <!-- Add-ons for installation media and products -->
  <add-on>
    <add_on_products config:type="list">
      <listentry>
        <media_url><![CDATA[ relurl:// ]]></media_url>
        <product>sle-module-basesystem</product>
        <product_dir>/Module-Basesystem</product_dir>
      </listentry>
    </add_on_products>
  </add-on>

  <!-- General Installation Mode -->
  <general>
    <mode>
      <confirm config:type="boolean">false</confirm> <!-- No confirmation prompts -->
      <final_halt config:type="boolean">true</final_halt>
    </mode>
  </general>

  <!-- Keyboard Configuration -->
  <keyboard>
    <keymap>us</keymap> <!-- Configure keymap to 'us' for U.S. layout -->
  </keyboard>

  <!-- Language Settings -->
  <language>
    <language>en_US</language>
  </language>

  <!-- Timezone Configuration -->
  <timezone>
    <timezone>Etc/GMT</timezone>
  </timezone>

  {%- if use_custom_partitioning %}
  <!-- Custom Partitioning Scheme -->
  <partitioning config:type="list">
    <drive>
      {%- if use_specific_disk %}
      <!-- Use specific device if specified -->
      <device>{{ target_disk_device }}</device>
      {%- else %}
      <!-- Automatic disk selection with filtering -->
      <skip_list config:type="list">
        {%- if use_model_skip %}
        <!-- Skip disks by model names -->
        {%- for model in skip_disk_models %}
        <listentry>
          <skip_key>model</skip_key>
          <skip_value>{{ model }}</skip_value>
        </listentry>
        {%- endfor %}
        {%- endif %}
        {%- if use_driver_skip %}
        <!-- Skip disks by driver names -->
        {%- for driver in skip_disk_drivers %}
        <listentry>
          <skip_key>driver</skip_key>
          <skip_value>{{ driver }}</skip_value>
        </listentry>
        {%- endfor %}
        {%- endif %}
        <!-- Skip disks that are too small -->
        <listentry>
          <skip_key>size_k</skip_key>
          <skip_value>{{ minimum_disk_size_gb * 1024 * 1024 }}</skip_value>
          <skip_if_less_than config:type="boolean">true</skip_if_less_than>
        </listentry>
      </skip_list>
      {%- endif %}
      <initialize config:type="boolean">true</initialize>
      <use>all</use>
      <partitions config:type="list">
        {%- if enable_boot_efi %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>{{ boot_efi_size }}MB</size>
          <mount>/boot/efi</mount>
          <filesystem config:type="symbol">fat</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}
        
        {%- if enable_boot %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>{{ boot_size }}MB</size>
          <mount>/boot</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {%- if use_lvm %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>max</size>
          <lvm_group>system</lvm_group>
          <format config:type="boolean">false</format>
        </partition>
        {%- else %}
        {# Standard partitions without LVM #}
        {%- if enable_root %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>{{ root_size }}MB</size>
          <mount>/</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {%- if enable_var %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>{{ var_size }}MB</size>
          <mount>/var</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {%- if enable_var_log %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>{{ var_log_size }}MB</size>
          <mount>/var/log</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {%- if enable_tmp %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>{{ tmp_size }}MB</size>
          <mount>/tmp</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {%- if enable_swap %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>{{ swap_size }}MB</size>
          <mount>swap</mount>
          <filesystem config:type="symbol">swap</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {# Custom partitions #}
        {%- for partition in custom_partitions %}
        {%- if partition.enabled %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>{{ partition.size }}MB</size>
          <mount>{{ partition.mount }}</mount>
          <filesystem config:type="symbol">{{ partition.fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}
        {%- endfor %}

        {# /home partition (grows to fill remaining space) #}
        {%- if enable_home %}
        <partition>
          <create config:type="boolean">true</create>
          <partition_type>primary</partition_type>
          <size>max</size>
          <mount>/home</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}
        {%- endif %}
      </partitions>
    </drive>

    {%- if use_lvm %}
    <!-- LVM Volume Group -->
    <drive>
      <device>/dev/system</device>
      <type config:type="symbol">CT_LVM</type>
      <pesize>4M</pesize>
      <partitions config:type="list">
        {%- if enable_root %}
        <partition>
          <create config:type="boolean">true</create>
          <lv_name>root</lv_name>
          <size>{{ root_size }}MB</size>
          <mount>/</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {%- if enable_var %}
        <partition>
          <create config:type="boolean">true</create>
          <lv_name>var</lv_name>
          <size>{{ var_size }}MB</size>
          <mount>/var</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {%- if enable_var_log %}
        <partition>
          <create config:type="boolean">true</create>
          <lv_name>var_log</lv_name>
          <size>{{ var_log_size }}MB</size>
          <mount>/var/log</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {%- if enable_tmp %}
        <partition>
          <create config:type="boolean">true</create>
          <lv_name>tmp</lv_name>
          <size>{{ tmp_size }}MB</size>
          <mount>/tmp</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {%- if enable_swap %}
        <partition>
          <create config:type="boolean">true</create>
          <lv_name>swap</lv_name>
          <size>{{ swap_size }}MB</size>
          <mount>swap</mount>
          <filesystem config:type="symbol">swap</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}

        {# Custom partitions #}
        {%- for partition in custom_partitions %}
        {%- if partition.enabled %}
        <partition>
          <create config:type="boolean">true</create>
          <lv_name>{{ partition.name }}</lv_name>
          <size>{{ partition.size }}MB</size>
          <mount>{{ partition.mount }}</mount>
          <filesystem config:type="symbol">{{ partition.fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}
        {%- endfor %}

        {# /home partition (grows to fill remaining space) #}
        {%- if enable_home %}
        <partition>
          <create config:type="boolean">true</create>
          <lv_name>home</lv_name>
          <size>max</size>
          <mount>/home</mount>
          <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
          <format config:type="boolean">true</format>
        </partition>
        {%- endif %}
      </partitions>
      <use>all</use>
    </drive>
    {%- endif %}
  </partitioning>

  {%- else %}
  <!-- Automatic Partitioning Scheme -->
  <storage>
    <proposal>
      <lvm config:type="boolean">{{ use_lvm }}</lvm>
      <resize_windows config:type="boolean">false</resize_windows>
      <windows_delete_mode config:type="symbol">all</windows_delete_mode>
      <linux_delete_mode config:type="symbol">all</linux_delete_mode>
      <other_delete_mode config:type="symbol">all</other_delete_mode>
    </proposal>
  </storage>
  {%- endif %}

  <!-- Software Selection -->
  <software>
    <install_recommended t="boolean">true</install_recommended>
    <packages t="list">
      <package>iputils</package>
      <package>sudo</package>
    </packages>
    <products config:type="list">
      <product>SLES</product>
    </products>
  </software>

  <!-- Networking Configuration -->
  <networking>

    {%- set interface_physical = [] %}
    {%- set interface_bond = [] %}
    {%- set interface_vlan = [] %}

    {%- for interface in network.interfaces %}
      {%- if interface.interfaceType == 'physical' %}
        {%- set interface_physical = (interface_physical.push(interface), interface_physical) %}
      {%- elif interface.interfaceType == 'bond' %}
        {%- set interface_bond = (interface_bond.push(interface), interface_bond) %}
      {%- elif interface.interfaceType == 'vlan' %}
        {%- set interface_vlan = (interface_vlan.push(interface), interface_vlan) %}
      {%- endif %}
    {%- endfor %}

    {# Find the first interface with DNS nameservers #}
    {%- set dns_servers = [] %}
    {%- set dns_found = False %}

    {# Check physical interfaces #}
    {%- for interface in interface_physical %}
      {%- if not dns_found and siteConfig and siteConfig.DNSServers %}
        {%- set dns_servers = siteConfig.DNSServers %}
        {%- set dns_found = True %}
      {%- endif %}
    {%- endfor %}

    {# If not found, check bond interfaces #}
    {%- if not dns_found %}
      {%- for interface in interface_bond %}
        {%- if not dns_found and siteConfig and siteConfig.DNSServers %}
          {%- set dns_servers = siteConfig.DNSServers %}
          {%- set dns_found = True %}
        {%- endif %}
      {%- endfor %}
    {%- endif %}

    {# If still not found, check VLAN interfaces #}
    {%- if not dns_found %}
      {%- for interface in interface_vlan %}
        {%- if not dns_found and siteConfig and siteConfig.DNSServers %}
          {%- set dns_servers = siteConfig.DNSServers %}
          {%- set dns_found = True %}
        {%- endif %}
      {%- endfor %}
    {%- endif %}

    {%- set dns_servers_str = dns_servers | join(',') %}


    {# Macro to construct interface names #}
    {%- macro construct_interface_name(interface) -%}
      {%- if interface.interfaceType == 'physical' -%}
        phy{{ interface.typeInterfaceId }}
      {%- elif interface.interfaceType == 'bond' -%}
        bond{{ interface.typeInterfaceId }}
      {%- elif interface.interfaceType == 'vlan' -%}
        vlan{{ interface.vlanId }}
      {%- else -%}
        {{ interface.typeInterfaceId }}
      {%- endif %}
    {%- endmacro -%}


    <backend>wicked</backend>
    <keep_install_network config:type="boolean">false</keep_install_network>
    <setup_before_proposal config:type="boolean">true</setup_before_proposal>
    <start_immediately config:type="boolean">true</start_immediately>
    <dns>
      <dhcp_hostname config:type="boolean">false</dhcp_hostname>
      <hostname>{{serverInstance.label}}</hostname>
      <nameservers config:type="list">
        {%- for server in dns_servers %}
          <nameserver>{{server}}</nameserver>
        {%- endfor %}
      </nameservers>
      <resolv_conf_policy>auto</resolv_conf_policy>
    </dns>
    <net-udev config:type="list">
       {%- for interface in interface_physical %} 
        <rule>
          <name>{{construct_interface_name(interface)}}</name>
          <rule>ATTR{address}</rule>
          <value>{{interface.macAddress | lower}}</value>
        </rule>
      {%- endfor %}
    </net-udev>
    
    <interfaces config:type="list">

      {%- for interface in interface_physical %}
        {%- set is_bond_slave = false %}
        {%- for bond in interface_bond %}
          {%- if interface.typeInterfaceId in [bond.members[0].id, bond.members[1].id] %}
            {%- set is_bond_slave = true %}
          {%- endif %}
        {%- endfor %}
        <interface>
          <name>{{construct_interface_name(interface)}}</name>
          <startmode>auto</startmode>
          {%- if is_bond_slave %}
            <bootproto>none</bootproto>
          {%- elif interface.ipv4Addresses | length > 0 %}
            <bootproto>static</bootproto>
            <ipaddr>{{interface.ipv4Addresses[0].cidr}}</ipaddr>            
            {%- if interface.ipv6Addresses | length > 0 %}
            <aliases>
              <alias0>
                <IPADDR>{{interface.ipv6Addresses[0].cidr}}</IPADDR>
              </alias0>
            </aliases>
            {%- endif %}
          {%- elif interface.ipv6Addresses | length > 0 %}
            <bootproto>static</bootproto>
            <ipaddr>{{interface.ipv6Addresses[0].cidr}}</ipaddr>
            <mtu>{{interface.mtu}}</mtu>
          {%- else %}
            <bootproto>none</bootproto>
          {%- endif %}
          {%- if interface.mtu %}
            <mtu>{{interface.mtu}}</mtu>
          {%- endif %}
        </interface>
      {%- endfor %}
      
      {%- for interface in interface_bond %}
        <interface>
          <name>{{construct_interface_name(interface)}}</name>
          <startmode>auto</startmode>
          {%- if interface.ipv4Addresses | length > 0 %}
            <bootproto>static</bootproto>
            <ipaddr>{{interface.ipv4Addresses[0].cidr}}</ipaddr>
            {%- if interface.ipv6Addresses | length > 0 %}
            <aliases>
              <alias0>
                <IPADDR>{{interface.ipv6Addresses[0].cidr}}</IPADDR>
              </alias0>
            </aliases>
            {%- endif %}  
          {%- elif interface.ipv6Addresses | length > 0 %}
            <bootproto>static</bootproto>
            <ipaddr>{{interface.ipv6Addresses[0].cidr}}</ipaddr>
          {%- else %}
            <bootproto>none</bootproto>
          {%- endif %}
          <bonding_master>yes</bonding_master>
          <bonding_module_opts>mode={{ interface.parameters.mode | default('802.3ad') }} miimon={{ interface.parameters.mii_monitor_interval | default(100) }}{% if interface.parameters.lacp_rate %} lacp_rate={{ interface.parameters.lacp_rate }}{% endif %}{% if interface.parameters.transmit_hash_policy %} xmit_hash_policy={{ interface.parameters.transmit_hash_policy }}{% endif %}</bonding_module_opts>
          {%- for physical_interface in interface_physical %}
            {%- if physical_interface.typeInterfaceId in [interface.members[0].id, interface.members[1].id] %}
            <bonding_slave{{loop.index0}}>{{construct_interface_name(physical_interface)}}</bonding_slave{{loop.index0}}>
            {%- endif %}
          {%- endfor %}
          {%- if interface.mtu %}
            <mtu>{{interface.mtu}}</mtu>
          {%- endif %}
        </interface>
      {%- endfor %}

    {%- for interface in interface_vlan %}  
      <interface t="map">
        <bootproto>static</bootproto>
          {%- if interface.links[0].interfaceType == "physical" %}
            {%- for physical_interface in interface_physical %}
              {%- if physical_interface.typeInterfaceId == interface.links[0].id %}
        <etherdevice>{{construct_interface_name(physical_interface)}}</etherdevice>
              {%- endif %}
            {%- endfor %}
          {%- elif interface.links[0].interfaceType == "bond" %}
            {%- for bond_interface in interface_bond %}
              {%- if bond_interface.typeInterfaceId == interface.links[0].id %}
        <etherdevice>{{construct_interface_name(bond_interface)}}</etherdevice>
              {%- endif %}
            {%- endfor %}
          {%- endif %}
        <name>vlan{{interface.vlanId}}</name>
          {%- if interface.ipv4Addresses | length > 0 %} 
            <ipaddr>{{interface.ipv4Addresses[0].cidr}}</ipaddr>
            {%- if interface.ipv6Addresses | length > 0 %}
            <aliases>
              <alias0>
                <IPADDR>{{interface.ipv6Addresses[0].cidr}}</IPADDR>
              </alias0>
            </aliases>
          {%- endif %}
          {%- elif interface.ipv6Addresses | length > 0 %}
            <ipaddr>{{interface.ipv6Addresses[0].cidr}}</ipaddr>
        {%- endif %}
          {%- if interface.mtu %}
            <mtu>{{interface.mtu}}</mtu>
          {%- endif %}
        <startmode>auto</startmode>
        <vlan_id>{{interface.vlanId}}</vlan_id>
      </interface>
    {%- endfor %}
    </interfaces>

    <ipv6 config:type="boolean">true</ipv6>
    <routing>
      <ipv4_forward config:type="boolean">false</ipv4_forward>
      <ipv6_forward config:type="boolean">false</ipv6_forward>
      <routes config:type="list">
        <route>
          <destination>default</destination>
          {%- set default_device = "" %}
          {%- set default_gateway = "" %}
          {%- for interface in interface_vlan %}
            {%- if interface.routes and interface.routes[0] and default_device == "" %}
              {%- set default_device = "vlan" ~ interface.vlanId %}
              {%- set default_gateway = interface.routes[0].via %}
            {%- endif %}
          {%- endfor %}
          {%- if default_device == "" %}
            {%- for interface in interface_bond %}
              {%- if interface.routes and interface.routes[0] and default_device == "" %}
                {%- set default_device = construct_interface_name(interface) %}
                {%- set default_gateway = interface.routes[0].via %}
              {%- endif %}
            {%- endfor %}
          {%- endif %}
          {%- if default_device == "" %}
            {%- for interface in interface_physical %}
              {%- if interface.routes and interface.routes[0] and default_device == "" %}
                {%- set default_device = construct_interface_name(interface) %}
                {%- set default_gateway = interface.routes[0].via %}
              {%- endif %}
            {%- endfor %}
          {%- endif %}
          <device>{{ default_device }}</device>
          <gateway>{{ default_gateway }}</gateway>
        </route>
      </routes>
    </routing>
  </networking>

  <!-- User Settings -->
  <users config:type="list">
    {%- if initial_username != "root" %}
    <!-- Create initial user -->
    <user>
      <username>{{ initial_username }}</username>
      <user_password>{{ serverInstance.osCredentials.initialPasswordEncrypted }}</user_password>
      <encrypted config:type="boolean">false</encrypted>
      <home>{{ homedir }}</home>
      <shell>/bin/bash</shell>
      <authorized_keys config:type="list">
        {%- if userSSHKeys and (userSSHKeys | length) %}
          {%- for key in userSSHKeys %}
        <listentry> {{ key }} </listentry>
          {%- endfor %}
        {%- endif %}
        {%- if managementSSHKey %}
        <listentry> {{ managementSSHKey }} </listentry>
        {%- endif %}
      </authorized_keys>
    </user>
    {%- endif %}
    
    <!-- Root user configuration -->
    <user>
      <username>root</username>
      {%- if initial_username == "root" %}
      <user_password>{{ serverInstance.osCredentials.initialPasswordEncrypted }}</user_password>
      <encrypted config:type="boolean">false</encrypted>
      <authorized_keys config:type="list">
        {%- if userSSHKeys and (userSSHKeys | length) %}
          {%- for key in userSSHKeys %}
        <listentry> {{ key }} </listentry>
          {%- endfor %}
        {%- endif %}
        {%- if managementSSHKey %}
        <listentry> {{ managementSSHKey }} </listentry>
        {%- endif %}
      </authorized_keys>
      {%- else %}
      <!-- Root account gets same password as initial user -->
      <user_password>{{ serverInstance.osCredentials.initialPasswordEncrypted }}</user_password>
      <encrypted config:type="boolean">false</encrypted>
      {%- endif %}
    </user>
  </users>

  <!-- Post-installation script for sudo configuration -->
  <scripts>
    <chroot-scripts config:type="list">
      <script>
        <filename>setup-sudo.sh</filename>
        <chrooted config:type="boolean">true</chrooted>
        <source><![CDATA[
#!/bin/bash
# Configure sudo for initial user
{%- if initial_username != "root" %}
echo "Adding {{ initial_username }} to sudoers groups"

# Add user to both wheel and sudo groups (SUSE compatibility)
usermod -aG wheel {{ initial_username }}
usermod -aG sudo {{ initial_username }} 2>/dev/null || true

# Create sudoers file with NOPASSWD
echo "{{ initial_username }} ALL=(ALL:ALL) NOPASSWD:ALL" > /etc/sudoers.d/{{ initial_username }}
chmod 0440 /etc/sudoers.d/{{ initial_username }}

# Validate sudoers file
visudo -c -f /etc/sudoers.d/{{ initial_username }}
echo "Sudo configuration for {{ initial_username }} completed"
{%- endif %}

# Ensure sudo groups exist and are configured
if ! grep -q "^%wheel" /etc/sudoers; then
    echo "%wheel ALL=(ALL:ALL) ALL" >> /etc/sudoers
fi

if ! grep -q "^%sudo" /etc/sudoers; then
    echo "%sudo ALL=(ALL:ALL) ALL" >> /etc/sudoers
fi

# Verify configuration
echo "Current sudo configuration:"
cat /etc/sudoers.d/{{ initial_username }} 2>/dev/null || echo "No user-specific sudoers file found"
        ]]></source>
      </script>
    </chroot-scripts>
  </scripts>

  <!-- NTP Client Configuration -->
  <ntp-client>
    <ntp_policy>auto</ntp_policy>
    <ntp_servers config:type="list">
      {%- if siteConfig and siteConfig.NTPServers %}
        {%- for ntp_server in siteConfig.NTPServers %}
      <ntp_server>
        <address>{{ ntp_server }}</address>
        <iburst config:type="boolean">false</iburst>
        <offline config:type="boolean">true</offline>
      </ntp_server>
        {%- endfor %}
      {%- else %}
      <ntp_server>
        <address>pool.ntp.org</address>
        <iburst config:type="boolean">false</iburst>
        <offline config:type="boolean">true</offline>
      </ntp_server>
      {%- endif %}
    </ntp_servers>
    <ntp_sync>15</ntp_sync>
  </ntp-client>

</profile>
