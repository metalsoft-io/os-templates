<?xml version="1.0"?>
<!DOCTYPE profile>
<profile xmlns="http://www.suse.com/1.0/yast2ns"
         xmlns:config="http://www.suse.com/1.0/configns">

  <!-- Add-ons for installation media and products -->
  <add-on>
    <add_on_products config:type="list">
      <listentry>
        <media_url><![CDATA[ relurl:// ]]></media_url>
        <product>sle-module-basesystem</product>
        <product_dir>/Module-Basesystem</product_dir>
      </listentry>
    </add_on_products>
  </add-on>

  <!-- General Installation Mode -->
  <general>
    <mode>
      <confirm config:type="boolean">false</confirm> <!-- No confirmation prompts -->
      <final_halt config:type="boolean">true</final_halt>
    </mode>
  </general>

  <!-- Keyboard Configuration -->
  <keyboard>
    <keymap>us</keymap> <!-- Configure keymap to 'us' for U.S. layout -->
  </keyboard>

  <!-- Language Settings -->
  <language>
    <language>en_US</language>
  </language>

  <!-- Timezone Configuration -->
  <timezone>
    <timezone>Etc/GMT</timezone>
  </timezone>

  {# ============================================================================ #}
  {# PARTITIONING CONFIGURATION - Customize these settings for your deployment #}
  {# ============================================================================ #}

  {# Disk Configuration #}
  {%- set minimum_disk_size_gb = 100 %}

  {# Partitioning Configuration #}
  {%- set use_custom_partitioning = false %}
  {%- set use_lvm = true %}                {# Use LVM (true) or standard partitions (false) #}
  {%- set default_fstype = "xfs" %}        {# Default filesystem type (xfs, ext4, btrfs) #}

  {# Partition Enable/Disable Flags - Set to false to skip a partition #}
  {%- set enable_boot = true %}          {# Enable /boot partition (always recommended) #}
  {%- set enable_boot_efi = true %}      {# Enable /boot/efi partition (required for UEFI) #}
  {%- set enable_root = true %}          {# Enable / (root) partition (required) #}
  {%- set enable_var = true %}           {# Enable /var partition #}
  {%- set enable_var_log = false %}      {# Enable /var/log partition #}
  {%- set enable_tmp = true %}           {# Enable /tmp partition #}
  {%- set enable_swap = true %}          {# Enable swap partition #}
  {%- set enable_home = true %}          {# Enable /home partition #}

  {# Custom Partition Sizes (in MB) - Only used when use_custom_partitioning = true #}
  {%- set boot_size = 1024 %}           {# /boot partition size #}
  {%- set boot_efi_size = 512 %}        {# /boot/efi partition size #}
  {%- set root_size = 20480 %}          {# / (root) partition size (20GB) #}
  {%- set var_size = 102400 %}          {# /var partition size (100GB) #}
  {%- set var_log_size = 10240 %}       {# /var/log partition size (10GB) #}
  {%- set tmp_size = 2048 %}            {# /tmp partition size (2GB) #}
  {%- set swap_size = 8192 %}           {# swap partition size (8GB) #}
  {%- set home_min_size = 1024 %}       {# /home minimum size (grows to fill remaining space) #}

  {# Custom Additional Partitions - Define your own partitions here #}
  {# Each partition is defined as: {"mount": "/path", "size": MB, "name": "lv_name", "fstype": "fs", "options": "opts", "enabled": true/false} #}
  {%- set custom_partitions = [
    {"mount": "/data", "size": 51200, "name": "data", "fstype": default_fstype, "options": "", "enabled": false},
    {"mount": "/app", "size": 20480, "name": "app", "fstype": default_fstype, "options": "", "enabled": false},
    {"mount": "/backup", "size": 102400, "name": "backup", "fstype": default_fstype, "options": "", "enabled": false}
  ] %}

  <!-- Partitioning Scheme -->
  <storage>
    {%- if use_custom_partitioning %}
    <partitioning config:type="list">
      <drive>
        <device>/dev/sda</device>
        <initialize config:type="boolean">true</initialize>
        <use>all</use>
        <partitions config:type="list">
          {%- if enable_boot_efi %}
          <partition>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">vfat</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <mount>/boot/efi</mount>
            <mountby config:type="symbol">uuid</mountby>
            <partition_id config:type="integer">259</partition_id>
            <partition_nr config:type="integer">1</partition_nr>
            <resize config:type="boolean">false</resize>
            <size>{{ boot_efi_size }}MB</size>
          </partition>
          {%- endif %}
          
          {%- if enable_boot %}
          <partition>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <mount>/boot</mount>
            <mountby config:type="symbol">uuid</mountby>
            <partition_id config:type="integer">131</partition_id>
            <partition_nr config:type="integer">{{ 2 if enable_boot_efi else 1 }}</partition_nr>
            <resize config:type="boolean">false</resize>
            <size>{{ boot_size }}MB</size>
          </partition>
          {%- endif %}

          {%- if use_lvm %}
          <partition>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">lvm</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <lvm_group>system</lvm_group>
            <mountby config:type="symbol">device</mountby>
            <partition_id config:type="integer">142</partition_id>
            <partition_nr config:type="integer">{{ 3 if enable_boot_efi and enable_boot else (2 if enable_boot_efi or enable_boot else 1) }}</partition_nr>
            <resize config:type="boolean">false</resize>
            <size>max</size>
          </partition>
          {%- else %}
          {# Standard partitions without LVM #}
          {%- if enable_root %}
          <partition>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <mount>/</mount>
            <mountby config:type="symbol">uuid</mountby>
            <partition_id config:type="integer">131</partition_id>
            <partition_nr config:type="integer">{{ 3 if enable_boot_efi and enable_boot else (2 if enable_boot_efi or enable_boot else 1) }}</partition_nr>
            <resize config:type="boolean">false</resize>
            <size>max</size>
          </partition>
          {%- endif %}
          {%- endif %}
        </partitions>
      </drive>
    </partitioning>

    {%- if use_lvm %}
    <lvm config:type="list">
      <lvm_group>
        <device>/dev/sda{{ 3 if enable_boot_efi and enable_boot else (2 if enable_boot_efi or enable_boot else 1) }}</device>
        <lvm_group_name>system</lvm_group_name>
        <pesize>4M</pesize>
        <lvm_lvs config:type="list">
          {%- if enable_root %}
          <lvm_lv>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <lv_name>root</lv_name>
            <mount>/</mount>
            <mountby config:type="symbol">device</mountby>
            <resize config:type="boolean">false</resize>
            <size>{{ root_size }}MB</size>
          </lvm_lv>
          {%- endif %}

          {%- if enable_var %}
          <lvm_lv>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <lv_name>var</lv_name>
            <mount>/var</mount>
            <mountby config:type="symbol">device</mountby>
            <resize config:type="boolean">false</resize>
            <size>{{ var_size }}MB</size>
          </lvm_lv>
          {%- endif %}

          {%- if enable_var_log %}
          <lvm_lv>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <lv_name>var_log</lv_name>
            <mount>/var/log</mount>
            <mountby config:type="symbol">device</mountby>
            <resize config:type="boolean">false</resize>
            <size>{{ var_log_size }}MB</size>
          </lvm_lv>
          {%- endif %}

          {%- if enable_tmp %}
          <lvm_lv>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <lv_name>tmp</lv_name>
            <mount>/tmp</mount>
            <mountby config:type="symbol">device</mountby>
            <resize config:type="boolean">false</resize>
            <size>{{ tmp_size }}MB</size>
          </lvm_lv>
          {%- endif %}

          {%- if enable_swap %}
          <lvm_lv>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">swap</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <lv_name>swap</lv_name>
            <mount>swap</mount>
            <mountby config:type="symbol">device</mountby>
            <resize config:type="boolean">false</resize>
            <size>{{ swap_size }}MB</size>
          </lvm_lv>
          {%- endif %}

          {# Custom partitions #}
          {%- for partition in custom_partitions %}
          {%- if partition.enabled %}
          <lvm_lv>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">{{ partition.fstype }}</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <lv_name>{{ partition.name }}</lv_name>
            <mount>{{ partition.mount }}</mount>
            <mountby config:type="symbol">device</mountby>
            <resize config:type="boolean">false</resize>
            <size>{{ partition.size }}MB</size>
          </lvm_lv>
          {%- endif %}
          {%- endfor %}

          {# /home partition (grows to fill remaining space) #}
          {%- if enable_home %}
          <lvm_lv>
            <create config:type="boolean">true</create>
            <crypt_fs config:type="boolean">false</crypt_fs>
            <filesystem config:type="symbol">{{ default_fstype }}</filesystem>
            <format config:type="boolean">true</format>
            <loop_fs config:type="boolean">false</loop_fs>
            <lv_name>home</lv_name>
            <mount>/home</mount>
            <mountby config:type="symbol">device</mountby>
            <resize config:type="boolean">false</resize>
            <size>max</size>
          </lvm_lv>
          {%- endif %}
        </lvm_lvs>
      </lvm_group>
    </lvm>
    {%- endif %}

    {%- else %}
    {# Use automatic partitioning proposal #}
    <proposal>
      <lvm config:type="boolean">{{ use_lvm }}</lvm>
      <resize_windows config:type="boolean">false</resize_windows>
      <windows_delete_mode config:type="symbol">all</windows_delete_mode>
      <linux_delete_mode config:type="symbol">all</linux_delete_mode>
      <other_delete_mode config:type="symbol">all</other_delete_mode>
    </proposal>
    {%- endif %}
  </storage>

  <!-- Software Selection -->
  <software>
    <install_recommended t="boolean">true</install_recommended>
    <packages t="list">
      <package>iputils</package>
    </packages>
    <products config:type="list">
      <product>SLES</product>
    </products>
  </software>

  <!-- Networking Configuration -->
  <networking>

    {%- set interface_physical = [] %}
    {%- set interface_bond = [] %}
    {%- set interface_vlan = [] %}

    {%- for interface in network.interfaces %}
      {%- if interface.interfaceType == 'physical' %}
        {%- set interface_physical = (interface_physical.push(interface), interface_physical) %}
      {%- elif interface.interfaceType == 'bond' %}
        {%- set interface_bond = (interface_bond.push(interface), interface_bond) %}
      {%- elif interface.interfaceType == 'vlan' %}
        {%- set interface_vlan = (interface_vlan.push(interface), interface_vlan) %}
      {%- endif %}
    {%- endfor %}

    {# Find the first interface with DNS nameservers #}
    {%- set dns_servers = [] %}
    {%- set dns_found = False %}

    {# Check physical interfaces #}
    {%- for interface in interface_physical %}
      {%- if not dns_found and siteConfig and siteConfig.DNSServers %}
        {%- set dns_servers = siteConfig.DNSServers %}
        {%- set dns_found = True %}
      {%- endif %}
    {%- endfor %}

    {# If not found, check bond interfaces #}
    {%- if not dns_found %}
      {%- for interface in interface_bond %}
        {%- if not dns_found and siteConfig and siteConfig.DNSServers %}
          {%- set dns_servers = siteConfig.DNSServers %}
          {%- set dns_found = True %}
        {%- endif %}
      {%- endfor %}
    {%- endif %}

    {# If still not found, check VLAN interfaces #}
    {%- if not dns_found %}
      {%- for interface in interface_vlan %}
        {%- if not dns_found and siteConfig and siteConfig.DNSServers %}
          {%- set dns_servers = siteConfig.DNSServers %}
          {%- set dns_found = True %}
        {%- endif %}
      {%- endfor %}
    {%- endif %}

    {%- set dns_servers_str = dns_servers | join(',') %}


    {# Macro to construct interface names #}
    {%- macro construct_interface_name(interface) -%}
      {%- if interface.interfaceType == 'physical' -%}
        phy{{ interface.typeInterfaceId }}
      {%- elif interface.interfaceType == 'bond' -%}
        bond{{ interface.typeInterfaceId }}
      {%- elif interface.interfaceType == 'vlan' -%}
        vlan{{ interface.vlanId }}
      {%- else -%}
        {{ interface.typeInterfaceId }}
      {%- endif %}
    {%- endmacro -%}


    <backend>wicked</backend>
    <keep_install_network config:type="boolean">false</keep_install_network>
    <setup_before_proposal config:type="boolean">true</setup_before_proposal>
    <start_immediately config:type="boolean">true</start_immediately>
    <dns>
      <dhcp_hostname config:type="boolean">false</dhcp_hostname>
      <hostname>{{serverInstance.label}}</hostname>
      <nameservers config:type="list">
        {%- for server in dns_servers %}
          <nameserver>{{server}}</nameserver>
        {%- endfor %}
      </nameservers>
      <resolv_conf_policy>auto</resolv_conf_policy>
    </dns>
    <net-udev config:type="list">
       {%- for interface in interface_physical %} 
        <rule>
          <name>{{construct_interface_name(interface)}}</name>
          <rule>ATTR{address}</rule>
          <value>{{interface.macAddress | lower}}</value>
        </rule>
      {%- endfor %}
    </net-udev>
    
    <interfaces config:type="list">

      {%- for interface in interface_physical %}
        {%- set is_bond_slave = false %}
        {%- for bond in interface_bond %}
          {%- if interface.typeInterfaceId in [bond.members[0].id, bond.members[1].id] %}
            {%- set is_bond_slave = true %}
          {%- endif %}
        {%- endfor %}
        <interface>
          <name>{{construct_interface_name(interface)}}</name>
          <startmode>auto</startmode>
          {%- if is_bond_slave %}
            <bootproto>none</bootproto>
          {%- elif interface.ipv4Addresses | length > 0 %}
            <bootproto>static</bootproto>
            <ipaddr>{{interface.ipv4Addresses[0].cidr}}</ipaddr>            
            {%- if interface.ipv6Addresses | length > 0 %}
            <aliases>
              <alias0>
                <IPADDR>{{interface.ipv6Addresses[0].cidr}}</IPADDR>
              </alias0>
            </aliases>
            {%- endif %}
          {%- elif interface.ipv6Addresses | length > 0 %}
            <bootproto>static</bootproto>
            <ipaddr>{{interface.ipv6Addresses[0].cidr}}</ipaddr>
            <mtu>{{interface.mtu}}</mtu>
          {%- else %}
            <bootproto>none</bootproto>
          {%- endif %}
          {%- if interface.mtu %}
            <mtu>{{interface.mtu}}</mtu>
          {%- endif %}
        </interface>
      {%- endfor %}
      
      {%- for interface in interface_bond %}
        <interface>
          <name>{{construct_interface_name(interface)}}</name>
          <startmode>auto</startmode>
          {%- if interface.ipv4Addresses | length > 0 %}
            <bootproto>static</bootproto>
            <ipaddr>{{interface.ipv4Addresses[0].cidr}}</ipaddr>
            {%- if interface.ipv6Addresses | length > 0 %}
            <aliases>
              <alias0>
                <IPADDR>{{interface.ipv6Addresses[0].cidr}}</IPADDR>
              </alias0>
            </aliases>
            {%- endif %}  
          {%- elif interface.ipv6Addresses | length > 0 %}
            <bootproto>static</bootproto>
            <ipaddr>{{interface.ipv6Addresses[0].cidr}}</ipaddr>
          {%- else %}
            <bootproto>none</bootproto>
          {%- endif %}
          <bonding_master>yes</bonding_master>
          <bonding_module_opts>mode={{ interface.parameters.mode | default('802.3ad') }} miimon={{ interface.parameters.mii_monitor_interval | default(100) }}{% if interface.parameters.lacp_rate %} lacp_rate={{ interface.parameters.lacp_rate }}{% endif %}{% if interface.parameters.transmit_hash_policy %} xmit_hash_policy={{ interface.parameters.transmit_hash_policy }}{% endif %}</bonding_module_opts>
          {%- for physical_interface in interface_physical %}
            {%- if physical_interface.typeInterfaceId in [interface.members[0].id, interface.members[1].id] %}
            <bonding_slave{{loop.index0}}>{{construct_interface_name(physical_interface)}}</bonding_slave{{loop.index0}}>
            {%- endif %}
          {%- endfor %}
          {%- if interface.mtu %}
            <mtu>{{interface.mtu}}</mtu>
          {%- endif %}
        </interface>
      {%- endfor %}

      {%- for interface in interface_vlan %}  
        <interface t="map">
          <bootproto>static</bootproto>
          {%- if interface.links[0].interfaceType == "physical" %}
            {%- for physical_interface in interface_physical %}
              {%- if physical_interface.typeInterfaceId == interface.links[0].id %}
          <etherdevice>{{construct_interface_name(physical_interface)}}</etherdevice>
              {%- endif %}
            {%- endfor %}
          {%- elif interface.links[0].interfaceType == "bond" %}
            {%- for bond_interface in interface_bond %}
              {%- if bond_interface.typeInterfaceId == interface.links[0].id %}
          <etherdevice>{{construct_interface_name(bond_interface)}}</etherdevice>
              {%- endif %}
            {%- endfor %}
          {%- endif %}
          <name>vlan{{interface.vlanId}}</name>
          {%- if interface.ipv4Addresses | length > 0 %} 
            <ipaddr>{{interface.ipv4Addresses[0].cidr}}</ipaddr>
            {%- if interface.ipv6Addresses | length > 0 %}
              <aliases>
                <alias0>
                  <IPADDR>{{interface.ipv6Addresses[0].cidr}}</IPADDR>
                </alias0>
              </aliases>
            {%- endif %}
          {%- elif interface.ipv6Addresses | length > 0 %}
            <ipaddr>{{interface.ipv6Addresses[0].cidr}}</ipaddr>
          {%- endif %}
          {%- if interface.mtu %}
            <mtu>{{interface.mtu}}</mtu>
          {%- endif %}
          <startmode>auto</startmode>
          <vlan_id>{{interface.vlanId}}</vlan_id>
        </interface>
      {%- endfor %}
    </interfaces>

    <ipv6 config:type="boolean">true</ipv6>
    <routing>
      <ipv4_forward config:type="boolean">false</ipv4_forward>
      <ipv6_forward config:type="boolean">false</ipv6_forward>
      <routes config:type="list">
        <route>
          <destination>default</destination>
          {%- set default_device = "" %}
          {%- set default_gateway = "" %}
          {%- for interface in interface_vlan %}
            {%- if interface.routes and interface.routes[0] and default_device == "" %}
              {%- set default_device = "vlan" ~ interface.vlanId %}
              {%- set default_gateway = interface.routes[0].via %}
            {%- endif %}
          {%- endfor %}
          {%- if default_device == "" %}
            {%- for interface in interface_bond %}
              {%- if interface.routes and interface.routes[0] and default_device == "" %}
                {%- set default_device = construct_interface_name(interface) %}
                {%- set default_gateway = interface.routes[0].via %}
              {%- endif %}
            {%- endfor %}
          {%- endif %}
          {%- if default_device == "" %}
            {%- for interface in interface_physical %}
              {%- if interface.routes and interface.routes[0] and default_device == "" %}
                {%- set default_device = construct_interface_name(interface) %}
                {%- set default_gateway = interface.routes[0].via %}
              {%- endif %}
            {%- endfor %}
          {%- endif %}
          <device>{{ default_device }}</device>
          <gateway>{{ default_gateway }}</gateway>
        </route>
      </routes>
    </routing>
  </networking>

  <!-- User Settings -->
  <users config:type="list">
    <user>
      <username>root</username>
      <user_password>{{serverInstance.osCredentials.initialPasswordEncrypted}}</user_password> <!-- Replace with desired password -->
      <encrypted config:type="boolean">false</encrypted> <!-- Indicates plain text password -->
      <authorized_keys config:type="list">
        {%- if userSSHKeys and (userSSHKeys | length) %}
          {%- for key in userSSHKeys %}
        <listentry> {{ key }} </listentry>
          {%- endfor %}
        {%- endif %}
        {%- if managementSSHKey %}
        <listentry> {{ managementSSHKey }} </listentry>
        {%- endif %}
      </authorized_keys>
    </user>
  </users>

  <!-- NTP Client Configuration -->
  <ntp-client>
    <ntp_policy>auto</ntp_policy>
    <ntp_servers config:type="list">
      {%- if siteConfig and siteConfig.NTPServers %}
        {%- for ntp_server in siteConfig.NTPServers %}
      <ntp_server>
        <address>{{ ntp_server }}</address>
        <iburst config:type="boolean">false</iburst>
        <offline config:type="boolean">true</offline>
      </ntp_server>
        {%- endfor %}
      {%- else %}
      <ntp_server>
        <address>pool.ntp.org</address>
        <iburst config:type="boolean">false</iburst>
        <offline config:type="boolean">true</offline>
      </ntp_server>
      {%- endif %}
    </ntp_servers>
    <ntp_sync>15</ntp_sync>
  </ntp-client>

</profile>
